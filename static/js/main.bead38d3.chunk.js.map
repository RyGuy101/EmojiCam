{"version":3,"sources":["components/TextView.tsx","redux/actions/actions.ts","utils/customHooks.ts","components/TypingInterface.tsx","components/App.tsx","redux/reducers/mainReducer.ts","redux/store.ts","index.tsx"],"names":["connectComponent","connect","state","text","main","currentWord","props","className","setCurrentWord","payload","type","pushCurrentWord","popLastWord","useConstRefFunc","fn","ref","useRef","current","useCallback","useTimeoutOrInterval","callback","delay","setFunc","clearFunc","callbackRef","handleRef","undefined","clear","useTimeout","window","setTimeout","clearTimeout","useInterval","setInterval","clearInterval","mapDispatchToProps","actions","useState","shift","setShift","caps","setCaps","showPunctuation","setShowPunctuation","numberKeyboard","setNumberKeyboard","tappedCharacter","repeatedBackspace","setRepeatedBackspace","repeatedSpace","setRepeatedSpace","Key","char","display","buttonProps","Button","outline","onTouchStart","e","defaultPrevented","onClick","clickedChar","test","slice","LetterKey","upperChar","lowerChar","PunctuationKey","backspace","length","startBackspaceInterval","clearBackspaceInterval","startBackspaceTimeout","clearBackspaceTimeout","startSpaceInterval","clearSpaceInterval","startSpaceTimeout","clearSpaceTimeout","id","dir","replaceAll","onDoubleClick","preventDefault","document","addEventListener","once","onMouseDown","App","produce","draftState","action","lastWord","match","reducer","combineReducers","mainReducer","store","createStore","composeWithDevTools","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bead38d3.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { AppState } from \"redux/store\";\nimport { ExtractPropsType } from \"utils/reduxUtils\";\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    text: state.main.text,\n    currentWord: state.main.currentWord,\n  };\n};\n\nconst connectComponent = connect(mapStateToProps);\ntype Props = ExtractPropsType<typeof connectComponent>;\n\nconst TextView = (props: Props) => {\n  return <div className=\"TextView\">{props.text + props.currentWord + \"▋\"}</div>;\n};\n\nexport default connectComponent(TextView);\n","export const setCurrentWord = (payload: string) => ({\n  type: \"SET_CURRENT_WORD\" as const,\n  payload: payload,\n});\n\nexport const pushCurrentWord = () => ({\n  type: \"PUSH_CURRENT_WORD\" as const,\n});\n\nexport const popLastWord = () => ({\n  type: \"POP_LAST_WORD\" as const,\n});\n","import { useRef, useCallback } from \"react\";\n\nexport function useConstRefFunc<T extends unknown[], V>(\n  fn: (...args: T) => V\n): (...args: T) => V {\n  const ref = useRef(fn);\n  ref.current = fn;\n  return useCallback((...args: T) => ref.current(...args), []);\n}\n\nfunction useTimeoutOrInterval(\n  callback: () => void,\n  delay: number,\n  setFunc: typeof window.setTimeout | typeof window.setInterval,\n  clearFunc: typeof window.clearTimeout | typeof window.clearInterval\n) {\n  const callbackRef = useRef(callback);\n  callbackRef.current = callback;\n  const handleRef = useRef<number | undefined>(undefined);\n\n  const clear = () => {\n    clearFunc(handleRef.current);\n  };\n  const start = () => {\n    clear();\n    handleRef.current = setFunc(() => callbackRef.current(), delay);\n  };\n\n  return [start, clear] as const;\n}\n\nexport function useTimeout(callback: () => void, delay: number) {\n  return useTimeoutOrInterval(\n    callback,\n    delay,\n    window.setTimeout,\n    window.clearTimeout\n  );\n}\n\nexport function useInterval(callback: () => void, delay: number) {\n  return useTimeoutOrInterval(\n    callback,\n    delay,\n    window.setInterval,\n    window.clearInterval\n  );\n}\n","import React, { useState, useRef, ComponentProps } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\n\nimport { AppState } from \"redux/store\";\nimport * as actions from \"redux/actions/actions\";\nimport { ExtractPropsType } from \"utils/reduxUtils\";\nimport { useConstRefFunc, useTimeout, useInterval } from \"utils/customHooks\";\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    currentWord: state.main.currentWord,\n  };\n};\n\nconst mapDispatchToProps = actions;\n\nconst connectComponent = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ExtractPropsType<typeof connectComponent>;\n\nconst TypingInterface = (props: Props) => {\n  const [shift, setShift] = useState(true);\n  const [caps, setCaps] = useState(false);\n  const [showPunctuation, setShowPunctuation] = useState(false);\n  const [numberKeyboard, setNumberKeyboard] = useState(false);\n  const tappedCharacter = useRef<string | null>(null);\n  const [repeatedBackspace, setRepeatedBackspace] = useState(false);\n  const [repeatedSpace, setRepeatedSpace] = useState(false);\n\n  const Key = useConstRefFunc(\n    ({\n      char,\n      display,\n      ...buttonProps\n    }: {\n      char: string;\n      display?: string;\n    } & ComponentProps<typeof Button>) => (\n      <Button\n        {...buttonProps}\n        outline\n        onTouchStart={(e) => {\n          if (buttonProps.onTouchStart) {\n            buttonProps.onTouchStart(e);\n            if (e.defaultPrevented) {\n              return;\n            }\n          }\n\n          tappedCharacter.current = char;\n        }}\n        onClick={(e) => {\n          if (buttonProps.onClick) {\n            buttonProps.onClick(e);\n            if (e.defaultPrevented) {\n              return;\n            }\n          }\n\n          const clickedChar = tappedCharacter.current\n            ? tappedCharacter.current\n            : char; // Fix weird bug on mobile where the wrong button gets clicked\n          tappedCharacter.current = null;\n          if (\n            /\\s/.test(props.currentWord.slice(-1)) &&\n            !/\\s/.test(clickedChar)\n          ) {\n            props.pushCurrentWord();\n            props.setCurrentWord(clickedChar);\n          } else {\n            props.setCurrentWord(props.currentWord + clickedChar);\n          }\n          setShift(false);\n          setShowPunctuation(clickedChar === \" \");\n        }}\n      >\n        {display ? display : char}\n      </Button>\n    )\n  );\n\n  const LetterKey = useConstRefFunc(\n    ({\n      upperChar,\n      lowerChar,\n      ...buttonProps\n    }: {\n      upperChar: string;\n      lowerChar: string;\n    } & ComponentProps<typeof Button>) => (\n      <Key char={shift || caps ? upperChar : lowerChar} {...buttonProps} />\n    )\n  );\n\n  const PunctuationKey = useConstRefFunc(({ char }: { char: string }) => (\n    <Button\n      outline\n      onClick={() => {\n        props.setCurrentWord(\n          props.currentWord.slice(0, -1) + char + (numberKeyboard ? \"\" : \" \")\n        );\n        setShift(\n          numberKeyboard ? false : char === \".\" || char === \"?\" || char === \"!\"\n        );\n        setShowPunctuation(false);\n      }}\n    >\n      {char}\n    </Button>\n  ));\n\n  const backspace = () => {\n    if (props.currentWord.length) {\n      props.setCurrentWord(props.currentWord.slice(0, -1));\n    } else {\n      props.popLastWord();\n    }\n    setShift(false);\n  };\n\n  const [startBackspaceInterval, clearBackspaceInterval] = useInterval(() => {\n    backspace();\n  }, 50);\n\n  const [startBackspaceTimeout, clearBackspaceTimeout] = useTimeout(() => {\n    backspace();\n    setRepeatedBackspace(true);\n    startBackspaceInterval();\n  }, 500);\n\n  const [startSpaceInterval, clearSpaceInterval] = useInterval(() => {\n    props.setCurrentWord(props.currentWord + \" \");\n    setShift(false);\n  }, 50);\n\n  const [startSpaceTimeout, clearSpaceTimeout] = useTimeout(() => {\n    props.setCurrentWord(props.currentWord + \" \");\n    setShift(false);\n    setRepeatedSpace(true);\n    startSpaceInterval();\n  }, 500);\n\n  return (\n    <div className=\"TypingInterface\">\n      <div id=\"top_bar\">\n        <Button\n          outline\n          id=\"switch_keyboard\"\n          onClick={() => setNumberKeyboard(!numberKeyboard)}\n        >\n          {numberKeyboard ? \"ABC\" : \"123\"}\n        </Button>\n        <div id=\"word_container\">\n          <span id=\"word\" dir=\"ltr\">\n            {props.currentWord.replaceAll(\"\\n\", \" \") + \"▋\"}\n          </span>\n        </div>\n        <Key char={\"\\n\"} display=\"⏎\" id=\"enter\" />\n      </div>\n\n      {numberKeyboard ? (\n        <div>\n          <div>\n            <Key char=\"7\" />\n            <Key char=\"8\" />\n            <Key char=\"9\" />\n            <Key char=\"@\" />\n            <Key char=\"-\" />\n          </div>\n          <div>\n            <Key char=\"4\" />\n            <Key char=\"5\" />\n            <Key char=\"6\" />\n            <Key char=\"$\" />\n            <Key char=\"%\" />\n          </div>\n          <div>\n            <Key char=\"1\" />\n            <Key char=\"2\" />\n            <Key char=\"3\" />\n            <Key char=\"'\" />\n            <Key char=\"/\" />\n          </div>\n        </div>\n      ) : (\n        <div id=\"qwerty\">\n          <div>\n            <LetterKey upperChar=\"Q\" lowerChar=\"q\" />\n            <LetterKey upperChar=\"W\" lowerChar=\"w\" />\n            <LetterKey upperChar=\"E\" lowerChar=\"e\" />\n            <LetterKey upperChar=\"R\" lowerChar=\"r\" />\n            <LetterKey upperChar=\"T\" lowerChar=\"t\" />\n            <LetterKey upperChar=\"Y\" lowerChar=\"y\" />\n            <LetterKey upperChar=\"U\" lowerChar=\"u\" />\n            <LetterKey upperChar=\"I\" lowerChar=\"i\" />\n            <LetterKey upperChar=\"O\" lowerChar=\"o\" />\n            <LetterKey upperChar=\"P\" lowerChar=\"p\" />\n          </div>\n          <div>\n            <LetterKey upperChar=\"A\" lowerChar=\"a\" />\n            <LetterKey upperChar=\"S\" lowerChar=\"s\" />\n            <LetterKey upperChar=\"D\" lowerChar=\"d\" />\n            <LetterKey upperChar=\"F\" lowerChar=\"f\" />\n            <LetterKey upperChar=\"G\" lowerChar=\"g\" />\n            <LetterKey upperChar=\"H\" lowerChar=\"h\" />\n            <LetterKey upperChar=\"J\" lowerChar=\"j\" />\n            <LetterKey upperChar=\"K\" lowerChar=\"k\" />\n            <LetterKey upperChar=\"L\" lowerChar=\"l\" />\n          </div>\n          <div>\n            <LetterKey upperChar=\"Z\" lowerChar=\"z\" />\n            <LetterKey upperChar=\"X\" lowerChar=\"x\" />\n            <LetterKey upperChar=\"C\" lowerChar=\"c\" />\n            <LetterKey upperChar=\"V\" lowerChar=\"v\" />\n            <LetterKey upperChar=\"B\" lowerChar=\"b\" />\n            <LetterKey upperChar=\"N\" lowerChar=\"n\" />\n            <LetterKey upperChar=\"M\" lowerChar=\"m\" />\n          </div>\n        </div>\n      )}\n\n      <div>\n        {numberKeyboard ? (\n          <Key char=\"0\" />\n        ) : (\n          <Button\n            outline={!shift && !caps}\n            id=\"shift\"\n            onClick={caps ? () => setCaps(false) : () => setShift(!shift)}\n            onDoubleClick={() => {\n              setCaps(true);\n              setShift(false);\n            }}\n          >\n            {caps ? \"⇪\" : \"⇧\"}\n          </Button>\n        )}\n        {showPunctuation ? (\n          <span id=\"punctuation\">\n            <PunctuationKey char=\".\" />\n            <PunctuationKey char=\",\" />\n            <PunctuationKey char=\"?\" />\n            <PunctuationKey char=\"!\" />\n          </span>\n        ) : (\n          <span>\n            <Key\n              char=\" \"\n              display=\"⎵\"\n              id=\"space\"\n              onClick={(e) => {\n                if (repeatedSpace) {\n                  e.preventDefault();\n                }\n              }}\n              onTouchStart={(e) => {\n                e.preventDefault();\n                setRepeatedSpace(false);\n                startSpaceTimeout();\n                document.addEventListener(\n                  \"touchend\",\n                  () => {\n                    clearSpaceTimeout();\n                    clearSpaceInterval();\n                  },\n                  { once: true }\n                );\n              }}\n              onMouseDown={() => {\n                setRepeatedSpace(false);\n                startSpaceTimeout();\n                document.addEventListener(\n                  \"mouseup\",\n                  () => {\n                    clearSpaceTimeout();\n                    clearSpaceInterval();\n                  },\n                  { once: true }\n                );\n              }}\n            />\n            <Button\n              outline\n              id=\"backspace\"\n              onClick={() => {\n                if (repeatedBackspace) {\n                  return;\n                }\n                backspace();\n              }}\n              onTouchStart={(e) => {\n                e.preventDefault();\n                setRepeatedBackspace(false);\n                startBackspaceTimeout();\n                document.addEventListener(\n                  \"touchend\",\n                  () => {\n                    clearBackspaceTimeout();\n                    clearBackspaceInterval();\n                  },\n                  { once: true }\n                );\n              }}\n              onMouseDown={() => {\n                setRepeatedBackspace(false);\n                startBackspaceTimeout();\n                document.addEventListener(\n                  \"mouseup\",\n                  () => {\n                    clearBackspaceTimeout();\n                    clearBackspaceInterval();\n                  },\n                  { once: true }\n                );\n              }}\n            >\n              ⌫\n            </Button>\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default connectComponent(TypingInterface);\n","import React from \"react\";\n\nimport \"./App.css\";\nimport TextView from \"./TextView\";\nimport TypingInterface from \"./TypingInterface\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <TextView />\n      <TypingInterface />\n    </div>\n  );\n};\n\nexport default App;\n","import produce from \"immer\";\nimport { AppAction } from \"../actions/actionTypes\";\n\ninterface State {\n  text: string;\n  currentWord: string;\n}\n\nconst initialState: State = {\n  text: \"\",\n  currentWord: \"\",\n};\n\nexport default produce((draftState: State, action: AppAction) => {\n  switch (action.type) {\n    case \"SET_CURRENT_WORD\": {\n      draftState.currentWord = action.payload;\n      return;\n    }\n    case \"PUSH_CURRENT_WORD\": {\n      draftState.text += draftState.currentWord;\n      draftState.currentWord = \"\";\n      return;\n    }\n    case \"POP_LAST_WORD\": {\n      const lastWord = draftState.text.match(/[^\\s]*[\\s]*$/g);\n      if (lastWord) {\n        draftState.currentWord = lastWord[0].slice(0, -1);\n        draftState.text = draftState.text.slice(0, -lastWord[0].length);\n      }\n      return;\n    }\n  }\n}, initialState);\n","import { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\n\nimport mainReducer from \"./reducers/mainReducer\";\n\n// Reducer setup\nconst reducer = combineReducers({\n  main: mainReducer,\n});\nexport type AppState = ReturnType<typeof reducer>;\n\n// Create store\nconst store = createStore(reducer, composeWithDevTools());\n\n// // Reselect setup\n// export const selectors = {};\n// // Reselect Devtools setup:\n// // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n// const selectorNames = Object.assign({}, ...Object.values(selectors));\n// const { getStateWith, registerSelectors } = require(\"reselect-tools\") as {\n//   getStateWith: (getState: () => AppState) => void;\n//   registerSelectors: (selectors: typeof selectorNames) => void;\n// };\n// registerSelectors(selectorNames); // register string names for selectors\n// getStateWith(() => store.getState()); // allows you to get selector inputs and outputs\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"sanitize.css\";\n\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport store from \"./redux/store\";\n\n// declare Node.js properties of 'window' provided by Electron\ndeclare global {\n  interface Window {\n    require: typeof require;\n    process: typeof process;\n  }\n}\n\nif (process.env.NODE_ENV === \"development\") {\n  console.log(\"Running in development mode\");\n} else {\n  console.log(\"Running in production mode\");\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}