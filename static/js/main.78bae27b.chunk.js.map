{"version":3,"sources":["components/TextView.tsx","redux/actions/actions.ts","components/TypingInterface.tsx","components/App.tsx","redux/reducers/mainReducer.ts","redux/store.ts","index.tsx"],"names":["connectComponent","connect","state","text","main","currentWord","props","className","setCurrentWord","payload","type","pushCurrentWord","popLastWord","mapDispatchToProps","actions","Key","char","display","parentProps","setShift","setShowPunctuation","tappedCharacter","rest","Button","outline","onTouchStart","e","current","onClick","test","slice","LetterKey","upperChar","shift","caps","keyProps","propsRef","useRef","useState","setCaps","showPunctuation","numberKeyboard","setNumberKeyboard","repeatSpaceHandle","undefined","repeatBackspaceHandle","letterKeyProps","PunctuationKey","backspace","length","repeatBackspace","preventDefault","window","setTimeout","setInterval","repeatSpace","clearTimeoutOrInterval","handleRef","console","log","clearTimeout","clearInterval","id","dir","replaceAll","onDoubleClick","onMouseDown","onMouseUp","onTouchEnd","App","produce","draftState","action","lastWord","match","reducer","combineReducers","mainReducer","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.78bae27b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { AppState } from \"redux/store\";\nimport { ExtractPropsType } from \"utils/reduxUtils\";\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    text: state.main.text,\n    currentWord: state.main.currentWord,\n  };\n};\n\nconst connectComponent = connect(mapStateToProps);\ntype Props = ExtractPropsType<typeof connectComponent>;\n\nconst TextView = (props: Props) => {\n  return <div className=\"TextView\">{props.text + props.currentWord + \"▋\"}</div>;\n};\n\nexport default connectComponent(TextView);\n","export const setCurrentWord = (payload: string) => ({\n  type: \"SET_CURRENT_WORD\" as const,\n  payload: payload,\n});\n\nexport const pushCurrentWord = () => ({\n  type: \"PUSH_CURRENT_WORD\" as const,\n});\n\nexport const popLastWord = () => ({\n  type: \"POP_LAST_WORD\" as const,\n});\n","import React, { useState, useRef, ComponentProps } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\n\nimport { AppState } from \"redux/store\";\nimport * as actions from \"redux/actions/actions\";\nimport { ExtractPropsType } from \"utils/reduxUtils\";\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    currentWord: state.main.currentWord,\n  };\n};\n\nconst mapDispatchToProps = actions;\n\nconst connectComponent = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ExtractPropsType<typeof connectComponent>;\n\nconst Key = ({\n  char,\n  display,\n  parentProps,\n  setShift,\n  setShowPunctuation,\n  tappedCharacter,\n  ...rest\n}: {\n  char: string;\n  display?: string;\n  parentProps: Props;\n  setShift: (val: boolean) => void;\n  setShowPunctuation: (val: boolean) => void;\n  tappedCharacter: React.MutableRefObject<string | null>;\n} & ComponentProps<typeof Button>) => (\n  <Button\n    {...rest}\n    outline\n    onTouchStart={(e) => {\n      tappedCharacter.current = char;\n\n      if (rest.onTouchStart) {\n        rest.onTouchStart(e);\n      }\n    }}\n    onClick={(e) => {\n      char = tappedCharacter.current ? tappedCharacter.current : char; // Fix weird bug on mobile where the wrong button gets clicked\n      tappedCharacter.current = null;\n      if (/\\s/.test(parentProps.currentWord.slice(-1)) && !/\\s/.test(char)) {\n        parentProps.pushCurrentWord();\n        parentProps.setCurrentWord(char);\n      } else {\n        parentProps.setCurrentWord(parentProps.currentWord + char);\n      }\n      setShift(false);\n      setShowPunctuation(char === \" \");\n\n      if (rest.onClick) {\n        rest.onClick(e);\n      }\n    }}\n  >\n    {display ? display : char}\n  </Button>\n);\n\nconst LetterKey = ({\n  upperChar,\n  shift,\n  caps,\n  ...keyProps\n}: {\n  upperChar: string;\n  shift: boolean;\n  caps: boolean;\n} & ComponentProps<typeof Key>) =>\n  shift || caps ? (\n    <Key {...keyProps} char={upperChar} />\n  ) : (\n    <Key {...keyProps} />\n  );\n\nconst TypingInterface = (props: Props) => {\n  const propsRef = useRef(props);\n  propsRef.current = props;\n\n  const [shift, setShift] = useState(true);\n  const [caps, setCaps] = useState(false);\n  const [showPunctuation, setShowPunctuation] = useState(false);\n  const [numberKeyboard, setNumberKeyboard] = useState(false);\n  const repeatSpaceHandle = useRef<number | undefined>(undefined);\n  const repeatBackspaceHandle = useRef<number | undefined>(undefined);\n  const tappedCharacter = useRef<string | null>(null);\n\n  const keyProps = {\n    parentProps: props,\n    setShift,\n    setShowPunctuation,\n    tappedCharacter,\n  };\n\n  const letterKeyProps = {\n    shift,\n    caps,\n    ...keyProps,\n  };\n\n  const PunctuationKey = ({ char }: { char: string }) => (\n    <Button\n      outline\n      onClick={() => {\n        props.setCurrentWord(\n          props.currentWord.slice(0, -1) + char + (numberKeyboard ? \"\" : \" \")\n        );\n        setShift(\n          numberKeyboard ? false : char === \".\" || char === \"?\" || char === \"!\"\n        );\n        setShowPunctuation(false);\n      }}\n    >\n      {char}\n    </Button>\n  );\n\n  const backspace = (currentWord: string) => {\n    if (currentWord.length) {\n      props.setCurrentWord(currentWord.slice(0, -1));\n    } else {\n      props.popLastWord();\n    }\n    setShift(false);\n  };\n\n  const repeatBackspace = (e: React.MouseEvent | React.TouchEvent) => {\n    e.preventDefault();\n    if (repeatBackspaceHandle.current === undefined) {\n      repeatBackspaceHandle.current = window.setTimeout(() => {\n        backspace(propsRef.current.currentWord);\n        repeatBackspaceHandle.current = window.setInterval(() => {\n          backspace(propsRef.current.currentWord);\n        }, 50);\n      }, 500);\n    }\n  };\n\n  const repeatSpace = (e: React.MouseEvent | React.TouchEvent) => {\n    // console.log(\"repeat\"); // TODO debug\n    e.preventDefault();\n    if (repeatSpaceHandle.current === undefined) {\n      repeatSpaceHandle.current = window.setTimeout(() => {\n        props.setCurrentWord(propsRef.current.currentWord + \" \");\n        setShift(false);\n        repeatSpaceHandle.current = window.setInterval(() => {\n          props.setCurrentWord(propsRef.current.currentWord + \" \");\n          setShift(false);\n        }, 50);\n      }, 500);\n    }\n  };\n\n  const clearTimeoutOrInterval = (\n    handleRef: React.MutableRefObject<number | undefined>\n  ) => {\n    console.log(\"touch end!\");\n    clearTimeout(handleRef.current);\n    clearInterval(handleRef.current);\n    handleRef.current = undefined;\n  };\n\n  return (\n    <div className=\"TypingInterface\">\n      <div id=\"top_bar\">\n        <Button\n          outline\n          id=\"switch_keyboard\"\n          onClick={() => setNumberKeyboard(!numberKeyboard)}\n        >\n          {numberKeyboard ? \"ABC\" : \"123\"}\n        </Button>\n        <div id=\"word_container\">\n          <span id=\"word\" dir=\"ltr\">\n            {props.currentWord.replaceAll(\"\\n\", \" \") + \"▋\"}\n          </span>\n        </div>\n        <Key char={\"\\n\"} display=\"⏎\" {...keyProps} id=\"enter\" />\n      </div>\n\n      {numberKeyboard ? (\n        <div>\n          <div>\n            <Key char=\"7\" {...keyProps} />\n            <Key char=\"8\" {...keyProps} />\n            <Key char=\"9\" {...keyProps} />\n            <Key char=\"@\" {...keyProps} />\n            <Key char=\"-\" {...keyProps} />\n          </div>\n          <div>\n            <Key char=\"4\" {...keyProps} />\n            <Key char=\"5\" {...keyProps} />\n            <Key char=\"6\" {...keyProps} />\n            <Key char=\"$\" {...keyProps} />\n            <Key char=\"%\" {...keyProps} />\n          </div>\n          <div>\n            <Key char=\"1\" {...keyProps} />\n            <Key char=\"2\" {...keyProps} />\n            <Key char=\"3\" {...keyProps} />\n            <Key char=\"'\" {...keyProps} />\n            <Key char=\"/\" {...keyProps} />\n          </div>\n        </div>\n      ) : (\n        <div id=\"qwerty\">\n          <div>\n            <LetterKey upperChar=\"Q\" char=\"q\" {...letterKeyProps} />\n            <LetterKey upperChar=\"W\" char=\"w\" {...letterKeyProps} />\n            <LetterKey upperChar=\"E\" char=\"e\" {...letterKeyProps} />\n            <LetterKey upperChar=\"R\" char=\"r\" {...letterKeyProps} />\n            <LetterKey upperChar=\"T\" char=\"t\" {...letterKeyProps} />\n            <LetterKey upperChar=\"Y\" char=\"y\" {...letterKeyProps} />\n            <LetterKey upperChar=\"U\" char=\"u\" {...letterKeyProps} />\n            <LetterKey upperChar=\"I\" char=\"i\" {...letterKeyProps} />\n            <LetterKey upperChar=\"O\" char=\"o\" {...letterKeyProps} />\n            <LetterKey upperChar=\"P\" char=\"p\" {...letterKeyProps} />\n          </div>\n          <div>\n            <LetterKey upperChar=\"A\" char=\"a\" {...letterKeyProps} />\n            <LetterKey upperChar=\"S\" char=\"s\" {...letterKeyProps} />\n            <LetterKey upperChar=\"D\" char=\"d\" {...letterKeyProps} />\n            <LetterKey upperChar=\"F\" char=\"f\" {...letterKeyProps} />\n            <LetterKey upperChar=\"G\" char=\"g\" {...letterKeyProps} />\n            <LetterKey upperChar=\"H\" char=\"h\" {...letterKeyProps} />\n            <LetterKey upperChar=\"J\" char=\"j\" {...letterKeyProps} />\n            <LetterKey upperChar=\"K\" char=\"k\" {...letterKeyProps} />\n            <LetterKey upperChar=\"L\" char=\"l\" {...letterKeyProps} />\n          </div>\n          <div>\n            <LetterKey upperChar=\"Z\" char=\"z\" {...letterKeyProps} />\n            <LetterKey upperChar=\"X\" char=\"x\" {...letterKeyProps} />\n            <LetterKey upperChar=\"C\" char=\"c\" {...letterKeyProps} />\n            <LetterKey upperChar=\"V\" char=\"v\" {...letterKeyProps} />\n            <LetterKey upperChar=\"B\" char=\"b\" {...letterKeyProps} />\n            <LetterKey upperChar=\"N\" char=\"n\" {...letterKeyProps} />\n            <LetterKey upperChar=\"M\" char=\"m\" {...letterKeyProps} />\n          </div>\n        </div>\n      )}\n\n      <div>\n        {numberKeyboard ? (\n          <Key char=\"0\" {...keyProps} />\n        ) : (\n          <Button\n            outline={!shift && !caps}\n            id=\"shift\"\n            onClick={caps ? () => setCaps(false) : () => setShift(!shift)}\n            onDoubleClick={() => {\n              setCaps(true);\n              setShift(false);\n            }}\n          >\n            {caps ? \"⇪\" : \"⇧\"}\n          </Button>\n        )}\n        {showPunctuation ? (\n          <span id=\"punctuation\">\n            <PunctuationKey char=\".\" />\n            <PunctuationKey char=\",\" />\n            <PunctuationKey char=\"?\" />\n            <PunctuationKey char=\"!\" />\n          </span>\n        ) : (\n          <span>\n            <Key\n              char=\" \"\n              display=\"⎵\"\n              {...keyProps}\n              id=\"space\"\n              onMouseDown={repeatSpace}\n              onTouchStart={repeatSpace}\n              onMouseUp={() => clearTimeoutOrInterval(repeatSpaceHandle)}\n              onTouchEnd={() => clearTimeoutOrInterval(repeatSpaceHandle)}\n            />\n            <Button\n              outline\n              id=\"backspace\"\n              onClick={() => backspace(props.currentWord)}\n              onMouseDown={repeatBackspace}\n              onTouchStart={repeatBackspace}\n              onMouseUp={() => clearTimeoutOrInterval(repeatBackspaceHandle)}\n              onTouchEnd={() => clearTimeoutOrInterval(repeatBackspaceHandle)}\n            >\n              ⌫\n            </Button>\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default connectComponent(TypingInterface);\n","import React from \"react\";\n\nimport \"./App.css\";\nimport TextView from \"./TextView\";\nimport TypingInterface from \"./TypingInterface\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <TextView />\n      <TypingInterface />\n    </div>\n  );\n};\n\nexport default App;\n","import produce from \"immer\";\nimport { AppAction } from \"../actions/actionTypes\";\n\ninterface State {\n  text: string;\n  currentWord: string;\n}\n\nconst initialState: State = {\n  text: \"\",\n  currentWord: \"\",\n};\n\nexport default produce((draftState: State, action: AppAction) => {\n  switch (action.type) {\n    case \"SET_CURRENT_WORD\": {\n      draftState.currentWord = action.payload;\n      return;\n    }\n    case \"PUSH_CURRENT_WORD\": {\n      draftState.text += draftState.currentWord;\n      draftState.currentWord = \"\";\n      return;\n    }\n    case \"POP_LAST_WORD\": {\n      const lastWord = draftState.text.match(/[^\\s]*[\\s]*$/g);\n      if (lastWord) {\n        draftState.currentWord = lastWord[0].slice(0, -1);\n        draftState.text = draftState.text.slice(0, -lastWord[0].length);\n      }\n      return;\n    }\n  }\n}, initialState);\n","import { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\n\nimport mainReducer from \"./reducers/mainReducer\";\n\n// Reducer setup\nconst reducer = combineReducers({\n  main: mainReducer,\n});\nexport type AppState = ReturnType<typeof reducer>;\n\n// Create store\nconst store = createStore(reducer, composeWithDevTools());\n\n// // Reselect setup\n// export const selectors = {};\n// // Reselect Devtools setup:\n// // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n// const selectorNames = Object.assign({}, ...Object.values(selectors));\n// const { getStateWith, registerSelectors } = require(\"reselect-tools\") as {\n//   getStateWith: (getState: () => AppState) => void;\n//   registerSelectors: (selectors: typeof selectorNames) => void;\n// };\n// registerSelectors(selectorNames); // register string names for selectors\n// getStateWith(() => store.getState()); // allows you to get selector inputs and outputs\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"sanitize.css\";\n\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport store from \"./redux/store\";\n\n// declare Node.js properties of 'window' provided by Electron\ndeclare global {\n  interface Window {\n    require: typeof require;\n    process: typeof process;\n  }\n}\n\nif (process.env.NODE_ENV === \"development\") {\n  console.log(\"Running in development mode\");\n} else {\n  console.log(\"Running in production mode\");\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}