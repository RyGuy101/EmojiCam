{"version":3,"sources":["components/TextView.tsx","redux/actions/actions.ts","utils/customHooks.ts","components/TypingInterface.tsx","components/App.tsx","redux/reducers/mainReducer.ts","redux/store.ts","index.tsx"],"names":["connectComponent","connect","state","text","main","currentWord","props","className","setCurrentWord","payload","type","pushCurrentWord","popLastWord","useConstRefFunc","fn","ref","useRef","current","useCallback","useTimeoutOrInterval","callback","delay","setFunc","clearFunc","callbackRef","handleRef","undefined","clear","useTimeout","window","setTimeout","clearTimeout","useInterval","setInterval","clearInterval","dictionary","require","dictionaryPath","mapDispatchToProps","actions","useState","shift","setShift","caps","setCaps","showPunctuation","setShowPunctuation","numberKeyboard","setNumberKeyboard","autoCorrected","setAutoCorrected","dontAutoCorrect","setDontAutoCorrect","tappedCharacter","repeatedBackspace","repeatedSpace","Key","char","display","buttonProps","Button","outline","onTouchStart","e","defaultPrevented","onClick","clickedChar","autoCorrectedWord","test","slice","word","trim","check","suggestions","suggest","length","LetterKey","upperChar","lowerChar","PunctuationKey","backspace","startBackspaceInterval","clearBackspaceInterval","startBackspaceTimeout","clearBackspaceTimeout","startSpaceInterval","clearSpaceInterval","startSpaceTimeout","clearSpaceTimeout","id","dir","replaceAll","onDoubleClick","preventDefault","document","addEventListener","once","onMouseDown","App","produce","draftState","action","lastWord","match","reducer","combineReducers","mainReducer","store","createStore","composeWithDevTools","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.39b9a8a6.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { AppState } from \"redux/store\";\nimport { ExtractPropsType } from \"utils/reduxUtils\";\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    text: state.main.text,\n    currentWord: state.main.currentWord,\n  };\n};\n\nconst connectComponent = connect(mapStateToProps);\ntype Props = ExtractPropsType<typeof connectComponent>;\n\nconst TextView = (props: Props) => {\n  return <div className=\"TextView\">{props.text + props.currentWord + \"▋\"}</div>;\n};\n\nexport default connectComponent(TextView);\n","export const setCurrentWord = (payload: string) => ({\n  type: \"SET_CURRENT_WORD\" as const,\n  payload: payload,\n});\n\nexport const pushCurrentWord = () => ({\n  type: \"PUSH_CURRENT_WORD\" as const,\n});\n\nexport const popLastWord = () => ({\n  type: \"POP_LAST_WORD\" as const,\n});\n","import { useRef, useCallback } from \"react\";\n\nexport function useConstRefFunc<T extends unknown[], V>(\n  fn: (...args: T) => V\n): (...args: T) => V {\n  const ref = useRef(fn);\n  ref.current = fn;\n  return useCallback((...args: T) => ref.current(...args), []);\n}\n\nfunction useTimeoutOrInterval(\n  callback: () => void,\n  delay: number,\n  setFunc: typeof window.setTimeout | typeof window.setInterval,\n  clearFunc: typeof window.clearTimeout | typeof window.clearInterval\n) {\n  const callbackRef = useRef(callback);\n  callbackRef.current = callback;\n  const handleRef = useRef<number | undefined>(undefined);\n\n  const clear = () => {\n    clearFunc(handleRef.current);\n  };\n  const start = () => {\n    clear();\n    handleRef.current = setFunc(() => callbackRef.current(), delay);\n  };\n\n  return [start, clear] as const;\n}\n\nexport function useTimeout(callback: () => void, delay: number) {\n  return useTimeoutOrInterval(\n    callback,\n    delay,\n    window.setTimeout,\n    window.clearTimeout\n  );\n}\n\nexport function useInterval(callback: () => void, delay: number) {\n  return useTimeoutOrInterval(\n    callback,\n    delay,\n    window.setInterval,\n    window.clearInterval\n  );\n}\n","import React, { useState, useRef, ComponentProps } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\n\nimport { AppState } from \"redux/store\";\nimport * as actions from \"redux/actions/actions\";\nimport { ExtractPropsType } from \"utils/reduxUtils\";\nimport { useConstRefFunc, useTimeout, useInterval } from \"utils/customHooks\";\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst Typo = require(\"typo-js\");\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\nconst dictionary = new Typo(\"en_US\", false, false, {\n  dictionaryPath: \"dictionaries\",\n});\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    currentWord: state.main.currentWord,\n  };\n};\n\nconst mapDispatchToProps = actions;\n\nconst connectComponent = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ExtractPropsType<typeof connectComponent>;\n\nconst TypingInterface = (props: Props) => {\n  const [shift, setShift] = useState(true);\n  const [caps, setCaps] = useState(false);\n  const [showPunctuation, setShowPunctuation] = useState(false);\n  const [numberKeyboard, setNumberKeyboard] = useState(false);\n  const [autoCorrected, setAutoCorrected] = useState(\"\");\n  const [dontAutoCorrect, setDontAutoCorrect] = useState(false);\n  const tappedCharacter = useRef<string | null>(null);\n  const repeatedBackspace = useRef(false);\n  const repeatedSpace = useRef(false);\n\n  const Key = useConstRefFunc(\n    ({\n      char,\n      display,\n      ...buttonProps\n    }: {\n      char: string;\n      display?: string;\n    } & ComponentProps<typeof Button>) => (\n      <Button\n        {...buttonProps}\n        outline\n        onTouchStart={(e) => {\n          if (buttonProps.onTouchStart) {\n            buttonProps.onTouchStart(e);\n            if (e.defaultPrevented) {\n              return;\n            }\n          }\n\n          tappedCharacter.current = char;\n        }}\n        onClick={(e) => {\n          if (buttonProps.onClick) {\n            buttonProps.onClick(e);\n            if (e.defaultPrevented) {\n              return;\n            }\n          }\n\n          const clickedChar = tappedCharacter.current\n            ? tappedCharacter.current\n            : char; // Fix weird bug on mobile where the wrong button gets clicked\n          tappedCharacter.current = null;\n          let autoCorrectedWord = \"\";\n          if (\n            /\\s/.test(props.currentWord.slice(-1)) &&\n            !/\\s/.test(clickedChar)\n          ) {\n            props.pushCurrentWord();\n            props.setCurrentWord(clickedChar);\n            setDontAutoCorrect(false);\n          } else {\n            let word = props.currentWord;\n            if (clickedChar === \" \") {\n              if (\n                !dontAutoCorrect &&\n                word.trim() === word &&\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n                !dictionary.check(word)\n              ) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-assignment\n                const suggestions = dictionary.suggest(word, 1);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                if (suggestions.length > 0) {\n                  autoCorrectedWord = word + clickedChar;\n                  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n                  word = suggestions[0];\n                }\n              }\n            }\n            props.setCurrentWord(word + clickedChar);\n          }\n          setShift(false);\n          setShowPunctuation(clickedChar === \" \");\n          setAutoCorrected(autoCorrectedWord);\n        }}\n      >\n        {display ? display : char}\n      </Button>\n    )\n  );\n\n  const LetterKey = useConstRefFunc(\n    ({\n      upperChar,\n      lowerChar,\n      ...buttonProps\n    }: {\n      upperChar: string;\n      lowerChar: string;\n    } & ComponentProps<typeof Button>) => (\n      <Key char={shift || caps ? upperChar : lowerChar} {...buttonProps} />\n    )\n  );\n\n  const PunctuationKey = useConstRefFunc(({ char }: { char: string }) => (\n    <Button\n      outline\n      onClick={() => {\n        props.setCurrentWord(\n          props.currentWord.slice(0, -1) + char + (numberKeyboard ? \"\" : \" \")\n        );\n        setShift(\n          numberKeyboard ? false : char === \".\" || char === \"?\" || char === \"!\"\n        );\n        if (autoCorrected !== \"\") {\n          setAutoCorrected(\n            autoCorrected.slice(0, -1) + char + (numberKeyboard ? \"\" : \" \")\n          );\n        }\n        setShowPunctuation(false);\n      }}\n    >\n      {char}\n    </Button>\n  ));\n\n  const backspace = () => {\n    if (props.currentWord.length) {\n      if (autoCorrected !== \"\") {\n        if (props.currentWord.slice(-1) === \" \") {\n          setAutoCorrected(autoCorrected.slice(0, -1));\n        } else {\n          setAutoCorrected(\"\");\n          setDontAutoCorrect(true);\n        }\n      }\n      props.setCurrentWord(props.currentWord.slice(0, -1));\n    } else {\n      props.popLastWord();\n      setDontAutoCorrect(false);\n    }\n    setShift(false);\n  };\n\n  const [startBackspaceInterval, clearBackspaceInterval] = useInterval(() => {\n    backspace();\n  }, 50);\n\n  const [startBackspaceTimeout, clearBackspaceTimeout] = useTimeout(() => {\n    backspace();\n    repeatedBackspace.current = true;\n    startBackspaceInterval();\n  }, 500);\n\n  const [startSpaceInterval, clearSpaceInterval] = useInterval(() => {\n    props.setCurrentWord(props.currentWord + \" \");\n    setShift(false);\n  }, 50);\n\n  const [startSpaceTimeout, clearSpaceTimeout] = useTimeout(() => {\n    props.setCurrentWord(props.currentWord + \" \");\n    setShift(false);\n    repeatedSpace.current = true;\n    startSpaceInterval();\n  }, 500);\n\n  return (\n    <div className=\"TypingInterface\">\n      <div id=\"top_bar\">\n        <Button\n          outline\n          id=\"switch_keyboard\"\n          onClick={() => setNumberKeyboard(!numberKeyboard)}\n        >\n          {numberKeyboard ? \"ABC\" : \"123\"}\n        </Button>\n        <div\n          id=\"word_container\"\n          onClick={() => {\n            if (autoCorrected !== \"\") {\n              props.setCurrentWord(autoCorrected);\n              setAutoCorrected(\"\");\n              setDontAutoCorrect(true);\n            }\n          }}\n        >\n          <span\n            id=\"word\"\n            dir=\"ltr\"\n            className={autoCorrected !== \"\" ? \"auto-corrected\" : \"\"}\n          >\n            {props.currentWord.replaceAll(\"\\n\", \" \") + \"▋\"}\n          </span>\n        </div>\n        <Key char={\"\\n\"} display=\"⏎\" id=\"enter\" />\n      </div>\n\n      {numberKeyboard ? (\n        <div>\n          <div>\n            <Key char=\"7\" />\n            <Key char=\"8\" />\n            <Key char=\"9\" />\n            <Key char=\"@\" />\n            <Key char=\"-\" />\n          </div>\n          <div>\n            <Key char=\"4\" />\n            <Key char=\"5\" />\n            <Key char=\"6\" />\n            <Key char=\"$\" />\n            <Key char=\"%\" />\n          </div>\n          <div>\n            <Key char=\"1\" />\n            <Key char=\"2\" />\n            <Key char=\"3\" />\n            <Key char=\"'\" onClick={() => setNumberKeyboard(false)} />\n            <Key char=\"/\" />\n          </div>\n        </div>\n      ) : (\n        <div id=\"qwerty\">\n          <div>\n            <LetterKey upperChar=\"Q\" lowerChar=\"q\" />\n            <LetterKey upperChar=\"W\" lowerChar=\"w\" />\n            <LetterKey upperChar=\"E\" lowerChar=\"e\" />\n            <LetterKey upperChar=\"R\" lowerChar=\"r\" />\n            <LetterKey upperChar=\"T\" lowerChar=\"t\" />\n            <LetterKey upperChar=\"Y\" lowerChar=\"y\" />\n            <LetterKey upperChar=\"U\" lowerChar=\"u\" />\n            <LetterKey upperChar=\"I\" lowerChar=\"i\" />\n            <LetterKey upperChar=\"O\" lowerChar=\"o\" />\n            <LetterKey upperChar=\"P\" lowerChar=\"p\" />\n          </div>\n          <div>\n            <LetterKey upperChar=\"A\" lowerChar=\"a\" />\n            <LetterKey upperChar=\"S\" lowerChar=\"s\" />\n            <LetterKey upperChar=\"D\" lowerChar=\"d\" />\n            <LetterKey upperChar=\"F\" lowerChar=\"f\" />\n            <LetterKey upperChar=\"G\" lowerChar=\"g\" />\n            <LetterKey upperChar=\"H\" lowerChar=\"h\" />\n            <LetterKey upperChar=\"J\" lowerChar=\"j\" />\n            <LetterKey upperChar=\"K\" lowerChar=\"k\" />\n            <LetterKey upperChar=\"L\" lowerChar=\"l\" />\n          </div>\n          <div>\n            <LetterKey upperChar=\"Z\" lowerChar=\"z\" />\n            <LetterKey upperChar=\"X\" lowerChar=\"x\" />\n            <LetterKey upperChar=\"C\" lowerChar=\"c\" />\n            <LetterKey upperChar=\"V\" lowerChar=\"v\" />\n            <LetterKey upperChar=\"B\" lowerChar=\"b\" />\n            <LetterKey upperChar=\"N\" lowerChar=\"n\" />\n            <LetterKey upperChar=\"M\" lowerChar=\"m\" />\n          </div>\n        </div>\n      )}\n\n      <div>\n        {numberKeyboard ? (\n          <Key char=\"0\" />\n        ) : (\n          <Button\n            outline={!shift && !caps}\n            id=\"shift\"\n            onClick={caps ? () => setCaps(false) : () => setShift(!shift)}\n            onDoubleClick={() => {\n              setCaps(true);\n              setShift(false);\n            }}\n          >\n            {caps ? \"⇪\" : \"⇧\"}\n          </Button>\n        )}\n        {showPunctuation ? (\n          <span id=\"punctuation\">\n            <PunctuationKey char=\".\" />\n            <PunctuationKey char=\",\" />\n            <PunctuationKey char=\"?\" />\n            <PunctuationKey char=\"!\" />\n          </span>\n        ) : (\n          <span>\n            <Key\n              char=\" \"\n              display=\"⎵\"\n              id=\"space\"\n              onClick={(e) => {\n                if (repeatedSpace.current) {\n                  e.preventDefault();\n                }\n              }}\n              onTouchStart={(e) => {\n                e.preventDefault();\n                repeatedSpace.current = false;\n                startSpaceTimeout();\n                document.addEventListener(\n                  \"touchend\",\n                  () => {\n                    clearSpaceTimeout();\n                    clearSpaceInterval();\n                  },\n                  { once: true }\n                );\n              }}\n              onMouseDown={() => {\n                repeatedSpace.current = false;\n                startSpaceTimeout();\n                document.addEventListener(\n                  \"mouseup\",\n                  () => {\n                    clearSpaceTimeout();\n                    clearSpaceInterval();\n                  },\n                  { once: true }\n                );\n              }}\n            />\n            <Button\n              outline\n              id=\"backspace\"\n              onClick={() => {\n                if (repeatedBackspace.current) {\n                  return;\n                }\n                backspace();\n              }}\n              onTouchStart={(e) => {\n                e.preventDefault();\n                repeatedBackspace.current = false;\n                startBackspaceTimeout();\n                document.addEventListener(\n                  \"touchend\",\n                  () => {\n                    clearBackspaceTimeout();\n                    clearBackspaceInterval();\n                  },\n                  { once: true }\n                );\n              }}\n              onMouseDown={() => {\n                repeatedBackspace.current = false;\n                startBackspaceTimeout();\n                document.addEventListener(\n                  \"mouseup\",\n                  () => {\n                    clearBackspaceTimeout();\n                    clearBackspaceInterval();\n                  },\n                  { once: true }\n                );\n              }}\n            >\n              ⌫\n            </Button>\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default connectComponent(TypingInterface);\n","import React from \"react\";\n\nimport \"./App.css\";\nimport TextView from \"./TextView\";\nimport TypingInterface from \"./TypingInterface\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <TextView />\n      <TypingInterface />\n    </div>\n  );\n};\n\nexport default App;\n","import produce from \"immer\";\nimport { AppAction } from \"../actions/actionTypes\";\n\ninterface State {\n  text: string;\n  currentWord: string;\n}\n\nconst initialState: State = {\n  text: \"\",\n  currentWord: \"\",\n};\n\nexport default produce((draftState: State, action: AppAction) => {\n  switch (action.type) {\n    case \"SET_CURRENT_WORD\": {\n      draftState.currentWord = action.payload;\n      return;\n    }\n    case \"PUSH_CURRENT_WORD\": {\n      draftState.text += draftState.currentWord;\n      draftState.currentWord = \"\";\n      return;\n    }\n    case \"POP_LAST_WORD\": {\n      const lastWord = draftState.text.match(/[^\\s]*[\\s]*$/g);\n      if (lastWord) {\n        draftState.currentWord = lastWord[0].slice(0, -1);\n        draftState.text = draftState.text.slice(0, -lastWord[0].length);\n      }\n      return;\n    }\n  }\n}, initialState);\n","import { createStore, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\n\nimport mainReducer from \"./reducers/mainReducer\";\n\n// Reducer setup\nconst reducer = combineReducers({\n  main: mainReducer,\n});\nexport type AppState = ReturnType<typeof reducer>;\n\n// Create store\nconst store = createStore(reducer, composeWithDevTools());\n\n// // Reselect setup\n// export const selectors = {};\n// // Reselect Devtools setup:\n// // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n// const selectorNames = Object.assign({}, ...Object.values(selectors));\n// const { getStateWith, registerSelectors } = require(\"reselect-tools\") as {\n//   getStateWith: (getState: () => AppState) => void;\n//   registerSelectors: (selectors: typeof selectorNames) => void;\n// };\n// registerSelectors(selectorNames); // register string names for selectors\n// getStateWith(() => store.getState()); // allows you to get selector inputs and outputs\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"sanitize.css\";\n\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport store from \"./redux/store\";\n\n// declare Node.js properties of 'window' provided by Electron\ndeclare global {\n  interface Window {\n    require: typeof require;\n    process: typeof process;\n  }\n}\n\nif (process.env.NODE_ENV === \"development\") {\n  console.log(\"Running in development mode\");\n} else {\n  console.log(\"Running in production mode\");\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}